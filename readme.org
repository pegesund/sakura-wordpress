# -*- Mode: POLY-ORG; encoding: utf-8; tab-width: 2;  -*- ---
#+Title: The WooCommerce plugin of Sakura network.
#+PROPERTY: header-args :results silent
#+OPTIONS: tex:t toc:2 \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+PROPERTY: header-args :results silent :noweb yes :tangle ./src/sakura.php
#+STARTUP: latexpreview
#+STARTUP: noindent
#+STARTUP: inlineimages
#+PROPERTY: header-args
#+PROPERTY: literate-lang php
#+PROPERTY: literate-load yes
* Table of Contents                                            :TOC:noexport:
- [[#preparation][preparation]]
  - [[#header][header]]
  - [[#prevent-data-leaks][Prevent Data Leaks]]
  - [[#define-sakura_plugin_file][define SAKURA_PLUGIN_FILE]]
  - [[#whether-enable-woocommerce-feature][whether enable WooCommerce feature.]]
- [[#implementation-of-main-class][Implementation of main class]]
  - [[#class-definition][class definition]]
  - [[#version-and-construct-of-main-class][version and construct of main class]]
  - [[#constructor-of-main-class][constructor of main class]]
  - [[#init-hooks][init hooks]]
  - [[#init-main-class][init main class]]
  - [[#store-source-sitearticle-into-a-local-cookie][store source site/article into a local cookie]]
  - [[#fetch-source-sitearticle-in-local-cookies][fetch source site/article in local cookies]]
  - [[#store-sitearticle-from-sakura-network-in-local-cookies02][store site/article from Sakura network in local cookies.]]
  - [[#handle-various-events][handle various events]]
    - [[#a-class-property-to-hold-the-current-action-name][a class property to hold the current action name.]]
    - [[#a-class-property-to-hold-the-current-action-params][a class property to hold the current action params]]
    - [[#a-function-to-enqueue-current-action-information][a function to enqueue current action information]]
    - [[#a-function-to-handle-the-delayed-action-queue][a function to handle the delayed action queue.]]
    - [[#new-order][new order]]
    - [[#add_to_cart][add_to_cart]]
    - [[#payment-complete][payment complete]]
  - [[#include-widget-in-email-receipt][include widget in Email receipt]]
    - [[#request-articles-from-sakura][request articles from Sakura]]
    - [[#render-articles-in-email-receipt][render articles in email receipt.]]
  - [[#render-widget-in-cart][render widget in cart]]
  - [[#render-widget-in-receipt-page][render widget in receipt page]]
  - [[#render-widget-in-thank-you-page][render widget in thank you page]]
  - [[#render-widget-in-place][render widget in place]]
  - [[#update-stock-status][update stock status]]
  - [[#setup_block_options-in-js-side][setup_block_options in JS side]]
  - [[#get-owned-sakura-networks-based-on-sakura-widget-key][get owned Sakura networks based on Sakura widget key]]
  - [[#extract-first-available-language-value-from-a-sql-jsonb-object][extract first available language value from a SQL JSONB object]]
  - [[#enqueue-js-files][enqueue js files]]
  - [[#show-action-links-on-the-plugin-screen][Show action links on the plugin screen]]
  - [[#define-constant-if-not-already-set][Define constant if not already set.]]
  - [[#singletone-of-main-class][singletone of Main class]]
- [[#load-the-instance-of-main-class][Load the instance of main class]]
- [[#a-widget-for-sakura-network][A Widget for Sakura network]]
  - [[#definition][definition]]
  - [[#construct][construct]]
  - [[#enqueue-scripts][enqueue scripts]]
  - [[#print-scripts][print scripts]]
  - [[#widget][widget]]
  - [[#form][form]]
  - [[#update][update]]
  - [[#load-widget][load widget]]
- [[#sakura-network-setttings-page][Sakura Network Setttings page]]
  - [[#a-class-for-this-page][a class for this page]]
  - [[#a-value-to-hold-the-options][a value to hold the options]]
  - [[#contruct-to-add-hooks][contruct to add hooks]]
  - [[#add-menu-for-setting-page][add menu for setting page]]
  - [[#add-setting-page][add setting page]]
  - [[#initialize-page][initialize page]]
  - [[#sanitize_callback][sanitize_callback]]
  - [[#section-info][section info]]
  - [[#callback-for-widget-key][callback for widget key]]
  - [[#callback-for-secret-key][callback for secret key]]
  - [[#callback-for-including-widget-in-email-receipt][callback for including widget in email receipt]]
  - [[#callback-for-including-widget-in-cartshopping-basket][callback for including widget in cart(Shopping basket)]]
  - [[#callback-for-including-widget-in-receipt-page][callback for including widget in receipt page]]
  - [[#callback-for-including-widget-in-thank-you-page][callback for including widget in thank you page]]
  - [[#create-setting-page-if-admin][create setting page if admin]]
  - [[#how-to-retrive-setting-value][how to retrive setting value]]
- [[#export-productspagesposts-to-sakura][Export products/pages/posts to Sakura]]
  - [[#a-class-for-this-page-1][a class for this page]]
  - [[#contruct-to-add-hooks-1][contruct to add hooks]]
  - [[#register_my_bulk_actions][register_my_bulk_actions]]
  - [[#bulk_action_handler][bulk_action_handler]]
  - [[#admin_notice][admin_notice]]
  - [[#create-bunk-export-in-admin][create bunk export in admin]]
- [[#javascript-codes][Javascript codes]]
  - [[#resize-sakura-widgets-height-to-fit-with-content][resize sakura widget's height to fit with content]]
- [[#a-new-block-in-postpage-editor][A new block in post/page editor]]
  - [[#environment-setup][environment setup]]
  - [[#registers-all-block-assets][Registers all block assets]]
  - [[#render-callback-for-the-block][Render callback for the block]]
  - [[#scss-style-for-editor][scss style for editor]]
  - [[#scss-style-for-front][scss style for front]]
  - [[#javascript-for-the-block][Javascript for the block]]
    - [[#import-dependencies][import dependencies]]
    - [[#edit-function][edit function]]
    - [[#register-block][register block]]
- [[#plugin-for-sakura-development-environment][Plugin for Sakura development environment]]
  - [[#headers-for-this-plugin][headers for this plugin]]
  - [[#disable-rejecting-unsafe-urls-by-a-wordpress-filter][disable rejecting unsafe urls by a WordPress filter]]
  - [[#return-sakura-server-address-from-a-local-file][return Sakura server address from a local file.]]
  - [[#log-activities-from-our-plugin][log activities from our plugin]]
  - [[#write-email-messages-to-local-test-file][write email messages to local test file.]]
- [[#deploy-to-local-development-environment][Deploy to local development environment]]
  - [[#install-database][install database]]
  - [[#install-wordpress][install wordpress]]
  - [[#generate-certs][generate certs]]
  - [[#setup-nginx-for-shop1--shop2][setup nginx for shop1 & shop2]]
  - [[#install-plugin][install plugin]]
- [[#plugin-description][Plugin Description]]
  - [[#summary][Summary]]
  - [[#description][description]]
  - [[#installation][installation]]
  - [[#changelog][changelog]]
- [[#build][Build]]
  - [[#definition-1][definition]]
  - [[#initialization][initialization]]
  - [[#prepare-files][Prepare files]]
  - [[#generating-zip-file][Generating zip file]]
  - [[#move-zip-file-to-root-directory][move zip file to root directory]]
  - [[#execute][execute]]
  - [[#deploy-online][deploy online]]
- [[#upload-to-wordpressorg-svn-repository][Upload to WordPress.org svn repository]]
  - [[#references][References]]
- [[#references-1][References]]

* preparation
** header
#+BEGIN_SRC php
<?php
/**
 * Plugin Name: Sakura Network
 * Plugin URI: https://www.sakura.eco
 * Description: An eCommerce toolkit that helps you show articles in a Sakura network.
 * Version: 1.0.7
 * Author: Sakura.eco
 * Author URI: https://www.sakura.eco/
 * Developer: Sakura.eco
 * Developer URI: https://www.sakura.eco/
 * Text Domain: sakura
 * Domain Path: /languages
 *
 * Woo: 12345:342928dfsfhsf8429842374wdf4234sfd
 * WC requires at least: 2.2
 * WC tested up to: 2.3
 *
 * Requires at least: 5.3
 * Requires PHP: 7.0
 *
 * @package SakuraEco
 */
#+END_SRC
** Prevent Data Leaks
https://docs.woocommerce.com/document/create-a-plugin/#section-7

Try to prevent direct access data leaks. Add this line of code after the opening PHP tag in each PHP file:
#+BEGIN_SRC php
if ( ! defined( 'ABSPATH' ) ) {
    exit; // Exit if accessed directly
}
#+END_SRC
** define SAKURA_PLUGIN_FILE
#+BEGIN_SRC php
if ( ! defined( 'SAKURA_PLUGIN_FILE' ) ) {
	define( 'SAKURA_PLUGIN_FILE', __FILE__ );
}
#+END_SRC
** whether enable WooCommerce feature.
#+BEGIN_SRC php
if (! ( in_array( 'woocommerce/woocommerce.php', apply_filters( 'active_plugins', get_option( 'active_plugins' ) ) ) )) {
	define( 'SAKURA_SUPPORT_WOO', false );
} else {
    define( 'SAKURA_SUPPORT_WOO', false );
}
#+END_SRC

* Implementation of main class
:PROPERTIES:
:header-args: :noweb yes :tangle no :noweb-ref sakura-main-class
:END:
** class definition
#+BEGIN_SRC php :tangle ./src/sakura.php :noweb-ref ""
/**
 * Main Sakura Class.
 *
 * @class Sakura
 */
final class Sakura {

  <<sakura-main-vars>>
  <<sakura-main-class>>
}

#+END_SRC

** version and construct of main class
#+BEGIN_SRC php
	/**
	 * Sakura version.
	 *
	 * @var string
	 */
	public $version = '1.0.7';

#+END_SRC
** constructor of main class
#+BEGIN_SRC php
	/**
	 * Sakura Constructor.
	 */
	public function __construct() {
		$this->define( 'SAKURA_PLUGIN_BASENAME', plugin_basename( SAKURA_PLUGIN_FILE ) );
		$this->init_hooks();
	}

#+END_SRC
** init hooks
# In frontend, the action =woocommerce_before_main_content= will be used both in shop products list page and single product content page.
You can check WooCommerce's [[https://woocommerce.github.io/code-reference/hooks/hooks.html][Action and Filter Hook Reference]] for a list of action and filter hooks.
Please note that we add out =init= to the end of =init= action, to ensure that WooCommerce' initialization will be processed firstly.
#+BEGIN_SRC php
	/**
	 * Hook into actions and filters.
	 *
	 * @since 2.3
	 */
	private function init_hooks() {
      do_action('sakura_record_activity', 'Initialize hooks for sakura network');
      add_action( 'init', array( $this, 'init' ), 999 );
      add_action( 'init', array( $this, 'init_block' ));
      add_action( 'shutdown', array( $this, 'execute_delayed_queue' ), 0 );
		  add_filter( 'plugin_action_links_' . SAKURA_PLUGIN_BASENAME, array( $this, 'plugin_action_links' ) );
      add_action('wp_enqueue_scripts', array( $this, 'enqueue_scripts'), 0);
      add_action('enqueue_block_editor_assets', array( $this, 'setup_block_options'), 0);
      // we have to add it before default actions. @see https://github.com/woocommerce/woocommerce/blob/trunk/includes/class-wc-emails.php#L194
		  add_action( 'woocommerce_email_footer' , array( $this, 'append_widget_in_email_receipt' ), 9);
		  add_action( 'woocommerce_after_cart' , array( $this, 'render_widget_in_cart' ));
		  add_action( 'woocommerce_cart_is_empty' , array( $this, 'render_widget_in_cart' ));
		  add_action( 'woocommerce_thankyou' , array( $this, 'render_widget_in_thank_you' ));
		  add_action( 'after_woocommerce_pay' , array( $this, 'render_widget_in_receipt_page' ));
		  add_action( 'woocommerce_product_set_stock_status' , function ($product_id) {
          do_action('sakura_record_activity', "try to sync product data");
          return $this->enqueue_action('update_stock_status', $product_id);
      });

      // a uniform interface to woocommerce events.
      add_action( 'woocommerce_new_order', function ($order_id) {
        return $this->enqueue_action('woocommerce_new_order', $order_id);
 }, 0 );
      // add_action( 'woocommerce_update_order', array( $this, 'update_order' ), 0 );
      // add_action( 'woocommerce_order_refunded', array( $this, 'refund_order' ), 0 );
      add_action( 'woocommerce_add_to_cart',
 function ($hash_id) {
 return $this->enqueue_action('woocommerce_add_to_cart', $hash_id);
 }, 0 );
      add_action( 'woocommerce_pre_payment_complete',
 function ($order_id) {
 return $this->enqueue_action('woocommerce_pre_payment_complete', $order_id);
 }, 0 );
	}
#+END_SRC
** init main class
#+BEGIN_SRC php
	/**
	 * Init Sakura when Wordpress Initialises.
	 */
	public function init() {
      // Classes/actions loaded for the frontend and for ajax requests.
    if (( ! is_admin() || defined( 'DOING_AJAX' ) ) && ! defined( 'DOING_CRON' )) {

        $this->store_sakura_history_in_cookie();
    }
	}

#+END_SRC

** store source site/article into a local cookie
#+BEGIN_SRC php
    /**
    * Store site/articles into a local cookie.
    */
    public function do_store_sakura_history_in_cookie($history) {
            $history_cookie_id = 0;
            do {
                $history_cookie_id++;
                $history_cookie_name = sprintf('sakura_history_%d', $history_cookie_id);
            } while (isset($_COOKIE[$history_cookie_name]));

            wc_setcookie($history_cookie_name, $history, time() + MONTH_IN_SECONDS);
            $_COOKIE[$history_cookie_name] = $history;
    }
#+END_SRC
** fetch source site/article in local cookies
#+BEGIN_SRC php
    /**
    * fetch site/articles in a local cookie.
    */
    public function sakura_history_in_cookie() {
        $history = NULL;
        foreach($_COOKIE as $key => $value) {
            if (strpos($key, 'sakura_history_', 0) === 0) {
                if (isset($history)) {
                    $history = $history . "," . sanitize_text_field($value);
                } else {
                    $history = sanitize_text_field($value);
                }
            }
        }
        return $history;
    }
#+END_SRC

** store site/article from Sakura network in local cookies.[0/2]
Please note that we have to [[https://stackoverflow.com/a/3230167][update cookie value]] directly so widget can access it correctly.

- [ ] store the time we added a Sakura from article.
- [ ] store the expired time of each articl to one month.
#+BEGIN_SRC php
    /**
    * Store site/articles from sakura networks.
    */
    public function store_sakura_history_in_cookie() {
        if (isset($_GET["sakura_from"])) {
            $article = rawurlencode($_GET["sakura_from"]);
            $history = sprintf('%s', $article);
            if (isset($_GET["sakura_to"])) {
              $history = $history . "-" . rawurlencode($_GET["sakura_to"]);
            }
            if (isset($_GET["sakura_network"])) {
              $history = $history . "-" . rawurlencode($_GET["sakura_network"]);
            }
            $this->do_store_sakura_history_in_cookie ($history);
        }
    }
#+END_SRC

** handle various events
We will handle required WooCommerce events in action [[https://developer.wordpress.org/reference/hooks/shutdown/][shutdown]] so it will not block the render of a WooCommerce page.
[[https://docs.woocommerce.com/document/managing-orders/#section-21][Managing Orders]].
*** a class property to hold the current action name.
#+BEGIN_SRC php :noweb-ref sakura-main-vars
   public $current_action = null;
#+END_SRC
*** a class property to hold the current action params
#+BEGIN_SRC php :noweb-ref sakura-main-vars
   public $current_action_params = null;
#+END_SRC
*** a function to enqueue current action information
#+BEGIN_SRC php
    /**
    * enqueue action
    */
    public function enqueue_action($action, $arg) {
            $this->current_action = $action;
            $this->current_action_params = $arg;
    }
#+END_SRC
*** a function to handle the delayed action queue.
The idea is from the web hooks mechanism of WooCommerce.
#+BEGIN_SRC php
    /**
    * Process action
    */
    public function execute_delayed_queue() {
        switch ($this->current_action)
        {
        case 'woocommerce_new_order':
            $this->new_order($this->current_action_params);
            break;
        case 'woocommerce_add_to_cart':
            $this->add_to_cart($this->current_action_params);
            break;
        case 'woocommerce_pre_payment_complete':
            $this->payment_complete = $this->current_action_params;
            break;
        case 'update_stock_status':
            $this->update_stock_status($this->current_action_params);
            break;
        }
    }

#+END_SRC

*** new order
http://hookr.io/actions/woocommerce_new_order/
Please note that we use =SKU= as the unique id in the Sakura side.
#+BEGIN_SRC php
    /**
    * New order
    */
    public function new_order($order_id) {
        do_action('sakura_record_activity', sprintf('new order: #%d', $order_id));
        $history = $this->sakura_history_in_cookie();
        if (isset($history)) {
                $order = wc_get_order($order_id);
                $sakura_network_options = get_option('sakura_network_option'); // Array of All Options
                $sakura_widget_key = $sakura_network_options['sakura_widget_key']; // Sakura Widget key
                do_action('sakura_record_activity', sprintf('notify sakura for new order: #%d', $order_id));
                foreach ($order->get_items() as $item_id => $item) {
                    $product = $item->get_product();
                    $payload = array(
                        'event' => 'purchase',
                        'pid' => $item->get_variation_id() ? $item->get_variation_id() : $item->get_product_id(),
                        'sakura-widget-key' => $sakura_widget_key,
                        'sku' => $product->get_sku(),
                        'total' => $item->get_total(),
                        'currency' => get_woocommerce_currency(),
                        'amount' => $item->get_quantity(),
                        'id' => $order_id,
                    );
                    $payload['history'] = $history;

                    $http_args = array(
                        'method'      => 'POST',
                        'timeout'     => MINUTE_IN_SECONDS,
                        'redirection' => 0,
                        'httpversion' => '1.0',
                        'blocking'    => true,
                        'user-agent'  => sprintf('WooCommerce Hookshot (WordPress/%s)', $GLOBALS['wp_version']),
                        'body'        => trim(wp_json_encode($payload)),
                        'headers'     => array(
                            'Content-Type' => 'application/json',
                        ),
                        'cookies'     => array(),
                    );
                    // Add custom headers.
                    $http_args['headers']['X-WC-Webhook-Source']      = home_url('/'); // Since 2.6.0.

                    $sakura_server = apply_filters('sakura_update_server_address', 'https://www.sakura.eco');
                    $response = wp_safe_remote_request(sprintf('%s/api/widget/event', $sakura_server), $http_args);
                    do_action('sakura_record_activity', $response);
                };
            }
    }
#+END_SRC
*** add_to_cart
#+BEGIN_SRC php
    /**
    * add to cart
    */
    public function add_to_cart($arg ) {
        do_action('sakura_record_activity', sprintf('notify sakura for add to cart: #%s', $arg));
    }
#+END_SRC
*** payment complete
#+BEGIN_SRC php
    /**
    * payment complete
    */
        public function payment_complete($order_id)
        {
            do_action('sakura_record_activity', sprintf('notify sakura for payment complete: #%d', $order_id));
        }

#+END_SRC

** include widget in Email receipt
We will append our widget behind the additional content.
Please note that only table and inline styles should be used in an email receipt.

*** request articles from Sakura
#+BEGIN_SRC php
    /**
    * fetch articles from Sakura server
    */
    public function articles($source) {
        $query_args = array();

        $sakura_network_options = get_option( 'sakura_network_option' ); // Array of All Options
        $sakura_widget_key = $sakura_network_options['sakura_widget_key']; // Sakura Widget key

        $sakura_server = apply_filters('sakura_update_server_address', 'https://www.sakura.eco');
        $url = $sakura_server . '/api/widget/articles/' . $sakura_widget_key;

        $history = SC()->sakura_history_in_cookie();
        if (isset($history)) {
            $query_args['history'] = $history;
        }
        if (isset($source)) {
            $query_args['source'] = $source;
        }

        if (SAKURA_SUPPORT_WOO) {
            $product = wc_get_product();
            if ($product) {
                $query_args['pid'] = $product->get_id();
                $query_args['sku'] = $product->get_sku();
            }
        }
        if (sizeof($query_args) > 0) {
            $url = $url . '?' . http_build_query($query_args);
        }
        $http_args = array(
            'method'      => 'GET',
            'timeout'     => MINUTE_IN_SECONDS,
            'redirection' => 0,
            'httpversion' => '1.0',
            'blocking'    => true,
            'user-agent'  => sprintf('WooCommerce Hookshot (WordPress/%s)', $GLOBALS['wp_version']),
            'headers'     => array(
                'Content-Type' => 'application/json',
            ));
        $response = wp_safe_remote_request($url);
        do_action('sakura_record_activity', $response);
        if ($response instanceof WP_Error) {
            return (object)array('status' => 'error',
                                 'message' => 'Failed to get articles');
        }
        return json_decode($response['body']);
    }
#+END_SRC

*** render articles in email receipt.
# [[https://github.com/woocommerce/woocommerce/blob/trunk/includes/emails/class-wc-email.php#L372][woocommerce_email_additional_content_]].
When writing the template for email, we should not use any javascript codes or advanced CSS styles such as flex.
And Woocommerce will also add some customized styles and append our styles in the end of it, so we better write styles
to override them and not use attributes such as =height=.
#+BEGIN_SRC php
    /**
    * apend widget in email receipt
    */
    public function append_widget_in_email_receipt($email) {
        $sakura_network_options = get_option('sakura_network_option'); // Array of All Options
        if (!isset ($sakura_network_options['sakura_email_receipt']) ||
            !$sakura_network_options['sakura_email_receipt']) {
            return;
        }
        do_action('sakura_record_activity', 'append_widget_in_email_receipt');

        $articles = $this->articles('email');
        if ($articles->{'status'} != 'success' ||
            empty($articles->{'articles'}))
        {
            return;
        }
        $fromSite = $articles->{'fromSite'};
        $fromArticle = $articles->{'fromArticle'};
        $sakura_from = '';
        if (!empty($fromSite)) {
            $sakura_from = $fromSite . ":";
        }
        if (!empty($fromArticle)) {
            if (empty($sakura_from)) {
                $sakura_from = ':';
            }
            $sakura_from .= $fromArticle;
        }

        $sakura_server = apply_filters('sakura_update_server_address', 'https://www.sakura.eco');
        ?>
            <br>
            <link href="https://fonts.googleapis.com/css?family=Montserrat:300,400,500,600,700&display=swap&subset=latin-ext" rel="stylesheet">
            <b style='display: block; font-family: Montserrat, "Helvetica Neue", Helvetica, Roboto, Arial, sans-serif; font-size: 18px; font-weight: bold; line-height: 130%; margin: 0 0 5px; text-align: left;'>OTHER CUSTOMERS ALSO LIKE</b>
            <span style='font-family: Montserrat;'>
            Discovery Name is a digital cooperation of online offering made for you to give you an even more relevant and exciting discovery online. </span>
            <br>
            <span style='font-family: Montserrat;'>
            Below you will find even more products that global customers also views, visits and purchases. On behalf of Discovery Name, we thank You for your purchase and invite you to discover even more products by clicking on one of the assets below. </span>

            <br>
            <div style="background:#f6f6f4;background-color:#f6f6f4; padding: 5px; width:100%">
                <table style="border-collapse: collapse; width: 100%; height: 36px; background-color: #f6f6f4; " border="0">
                <tbody>
                    <tr style="width:100%; height: 18px;">
                <td style="padding-top: 5px;padding-bottom: 5px;width: 100%; height: 18px;font-family: Montserrat;">&nbsp; &nbsp; DISCOVERY IN THE BLUE</td>
                    </tr>
                    <tr style="width:100%; height: 18px;">
                <td style="width: 100%; height: 18px;">
                    <div style="position: relative; width: 100%; overflow-x: scroll; overflow-y: hidden; height: 280px;">
                    <table style="border-collapse: collapse; margin-left: auto; margin-right: auto; position: absolute; top: 0; left: 0; right: 0; bottom: 0; " border="0">
                        <tbody>
                    <tr>
                    <?php
                        foreach( $articles->{'articles'} as $article_obj ) {
                            $title = esc_attr(SC()->in_first_available_lang($article_obj->{'title_i18n'}));
                            $desc = esc_attr(SC()->in_first_available_lang($article_obj->{'description_i18n'}));
                            $price = esc_attr($article_obj->{'price'});
                            $currency = esc_attr($article_obj->{'currency'});
                            $id = esc_attr($article_obj->{'id'});

                            $linkKey = $article_obj->{'link_key'};
                            $url = $sakura_server . '/api/widget/tracking/' . $linkKey . '/click';
                            $img = esc_attr($article_obj->{'photo'});
                            $from_network = $article_obj->{'from_network'};
                            $query_args = array();
                            if (!empty($sakura_from)) {
                                $query_args['sakura_from'] = $sakura_from;
                            }
                            $query_args['sakura_to'] = $id;
                            if (!empty($from_network)) {
                                $query_args['sakura_network'] = $from_network;
                            }

                            $trackImgURL = $sakura_server . '/api/widget/tracking/' . $linkKey . '/view';

                            ?>
                            <td>
                            <a target="_blank" href="<?php echo $url; ?>" title="<?php echo $desc ?>">
                            <img src="<?php echo $img ?>" style="max-height: 192px; max-width: 192px;"/></a>
                            <div style="text-align: center;font-family: Montserrat;" title="<?php echo $desc ?>"><b><?php echo $title ?></b></div>
                            <div style="text-align: center;" title="<?php echo $desc ?>">
                                <div data-column="1" data-groupkey="0">
                            <div style="font-family: Montserrat;"><?php echo $price ?>&nbsp;<?php echo $currency ?></div>
                                </div>
                            </div>
                            <div style="text-align: center;">
                                <img src="<?php echo $trackImgURL; ?>">
                            </div>
                            </td>
                            <?php
                        }
                    ?>
                    </tr>
                        </tbody>
                    </table>
                    </div>
                </td>
                    </tr>
                </tbody>
                </table>
                <div style="margin: 0; float: right;">
                    <span style="color: rgb(12, 46, 24); font-family: Montserrat; height:100%;">Networked by</span>
                    <a href="http://sakura.eco" target="_blank">
                    <img style="height: 15px; vertical-align: top;" src="https://www.sakura.eco/img/logo-2021-1.png"/>
                    </a>
                </div>
            </div>
        <?php
    }
#+END_SRC

** render widget in cart
#+BEGIN_SRC php
    /**
    * render widget in cart
    */
    public function render_widget_in_cart() {
        $sakura_network_options = get_option('sakura_network_option'); // Array of All Options
        if (!isset ($sakura_network_options['sakura_include_in_cart']) ||
            !$sakura_network_options['sakura_include_in_cart']) {
            return;
        }
        $this->render_widget_in_place();
    }
#+END_SRC

** render widget in receipt page
#+BEGIN_SRC php
    /**
    * render widget in receipt page
    */
    public function render_widget_in_receipt_page() {
        $sakura_network_options = get_option('sakura_network_option'); // Array of All Options
        if (!isset ($sakura_network_options['sakura_include_in_receipt']) ||
            !$sakura_network_options['sakura_include_in_receipt']) {
            return;
        }
        $this->render_widget_in_place();
    }
#+END_SRC

** render widget in thank you page
#+BEGIN_SRC php
    /**
    * render widget in thank you page
    */
    public function render_widget_in_thank_you() {
        $sakura_network_options = get_option('sakura_network_option'); // Array of All Options
        if (!isset ($sakura_network_options['sakura_include_in_thank_you']) ||
            !$sakura_network_options['sakura_include_in_thank_you']) {
            return;
        }
        $this->render_widget_in_place();
    }
#+END_SRC

** render widget in place
#+BEGIN_SRC php
    /**
    * render widget in place
    */
    public function render_widget_in_place() {
        do_action('sakura_record_activity', 'render_widget_in_place');
        $sakura_network_options = get_option( 'sakura_network_option' ); // Array of All Options
        $sakura_widget_key = $sakura_network_options['sakura_widget_key']; // Sakura Widget key

        $sakura_server = apply_filters('sakura_update_server_address', 'https://www.sakura.eco');
        $url = $sakura_server . '/widget/' . $sakura_widget_key;

        $query_args = array();

        $history = SC()->sakura_history_in_cookie();
        if (isset($history)) {
            $query_args['history'] = $history;
        }

        if (SAKURA_SUPPORT_WOO) {
            $product = wc_get_product();
            if ($product) {
                $query_args['pid'] = $product->get_id();
                $query_args['sku'] = $product->get_sku();
            }
        }
        if (sizeof($query_args) > 0) {
            $url = $url . '?' . http_build_query($query_args);
        }

        ?>
            <h3> OTHER CUSTOMERS ALSO LIKE </h3>
            <iframe class="sakura" style="width: 100%; height: 433px; border: 0" src="<?php echo $url; ?>" title="Sakura Transparency Widget"></iframe>
        <?php

    }

#+END_SRC

** update stock status
To avoid repeating updating stock status, a local cache will be used.
#+BEGIN_SRC php :noweb-ref sakura-main-vars
   public $stock_status_array = null;
#+END_SRC


#+BEGIN_SRC php
    /**
    * render widget in place
    */
    public function update_stock_status($product_id) {
        $product = wc_get_product( $product_id );
        $status = $product->get_stock_status();
        if (isset($stock_status_array[$product_id]) &&
            // If stock status keep unchanged, just return.
            $stock_status_array[$product_id] == $status) {
            return;
        }
        $sakura_network_options = get_option('sakura_network_option'); // Array of All Options

        $sakura_secret_key = $sakura_network_options['sakura_secret_key']; // Sakura Secret key
        if (!isset ($sakura_secret_key)) {
            do_action('sakura_record_activity', 'Failed to update stock status becuase of empty secret key');
            return;
        }
        $sakura_server = apply_filters('sakura_update_server_address', 'https://www.sakura.eco');
        $http_args = array(
            'method'      => 'GET',
            'timeout'     => MINUTE_IN_SECONDS,
            'redirection' => 0,
            'httpversion' => '1.0',
            'blocking'    => true,
            'user-agent'  => sprintf('WooCommerce Hookshot (WordPress/%s)', $GLOBALS['wp_version']),
            'headers'     => array(
                'Content-Type' => 'application/json',
            ));
        $response = wp_safe_remote_request(sprintf('%s/api/widget/updateStockStatus?secretKey=%s&pid=%s&sku=%s&stock_status=%s',
                                                   $sakura_server,
                                                   $sakura_secret_key,
                                                   $product_id,
                                                   $product->get_sku(),
                                                   $status), $http_args);
        do_action('sakura_record_activity', $response);
        $stock_status_array[$product->get_id()] = $status;
    }

#+END_SRC

** setup_block_options in JS side
#+BEGIN_SRC php
    /**
    * Initialize networks data for current site.
    */
    public function setup_block_options() {
        do_action('sakura_record_activity', 'setup_block_options');
        // wp_enqueue_script( 'sakura-network-data');
        wp_add_inline_script('wp-editor',
                             sprintf('var _sakura_networks = %s;',
                                     wp_json_encode($this->networks())));
    }
#+end_SRC

** get owned Sakura networks based on Sakura widget key
#+BEGIN_SRC php
    /**
    * Get a list of owned Sakura networks.
    */
    public function networks() {
        $sakura_network_options = get_option('sakura_network_option'); // Array of All Options

        $sakura_secret_key = $sakura_network_options['sakura_secret_key']; // Sakura Secret key
        if (!isset ($sakura_secret_key)) {
            return (object)array('status' => 'error',
                                 'message' => 'Please setup secret Key for Sakura network.');
        }

        $sakura_server = apply_filters('sakura_update_server_address', 'https://www.sakura.eco');
        $http_args = array(
            'method'      => 'GET',
            'timeout'     => MINUTE_IN_SECONDS,
            'redirection' => 0,
            'httpversion' => '1.0',
            'blocking'    => true,
            'user-agent'  => sprintf('WooCommerce Hookshot (WordPress/%s)', $GLOBALS['wp_version']),
            'headers'     => array(
                'Content-Type' => 'application/json',
            ));
        $response = wp_safe_remote_request(sprintf('%s/api/widget/networks?secretKey=%s', $sakura_server, $sakura_secret_key), $http_args);
        do_action('sakura_record_activity', $response);
        if ($response instanceof WP_Error) {
            return (object)array('status' => 'error',
                                 'message' => 'Failed to get networks');
        }
        return json_decode($response['body']);
    }
#+END_SRC

** extract first available language value from a SQL JSONB object
#+BEGIN_SRC php
    /**
    * extract first available language value from a SQL JSONB object.
    */
    public function in_first_available_lang($obj) {
        if (is_string($obj)) {
            return $obj;
        }

        if( isset( $obj->{'en'})) {
            return $obj->{'en'};
        };

        if(isset( $obj->{'no'})) {
            return $obj->{'no'};
        };

        return '';
    }
#+END_SRC

** enqueue js files
Please note that we put =sakura.js= to end of the body, so it can apply resizer to iframes in the body.
#+BEGIN_SRC php
    /**
    * enqueue js files.
    */
    public function enqueue_scripts() {
        wp_enqueue_script( 'iframeResizer', plugins_url( '/js/iframeResizer.min.js', __FILE__ ));
        wp_enqueue_script( 'sakura', plugins_url( '/js/sakura.js', __FILE__), array(), false, true);
    }
#+END_SRC

** Show action links on the plugin screen
#+BEGIN_SRC php
	/**
	 * Show action links on the plugin screen.
	 *
	 * @param mixed $links Plugin Action links.
	 *
	 * @return array
	 */
	public static function plugin_action_links( $links ) {
		$action_links = array(
			'settings' => '<a href="' . admin_url( 'admin.php?page=sakura-network' ) . '" aria-label="' . esc_attr__( 'View Sakura network settings', 'sakura' ) . '">' . esc_html__( 'Settings', 'sakura' ) . '</a>',
		);

		return array_merge( $action_links, $links );
	}

#+END_SRC

** Define constant if not already set.
#+BEGIN_SRC php
	/**
	 * Define constant if not already set.
	 *
	 * @param string      $name  Constant name.
	 * @param string|bool $value Constant value.
	 */
	private function define( $name, $value ) {
		if ( ! defined( $name ) ) {
			define( $name, $value );
		}
	}

#+END_SRC

** singletone of Main class
#+BEGIN_SRC php :tangle no

	/**
	 * The single instance of the class.
	 *
	 * @var Sakura
	 * @since 1.0
	 */
	protected static $_instance = null;

	/**
	 * Main Sakura Instance.
	 *
	 * Ensures only one instance of Sakura is loaded or can be loaded.
	 *
	 * @since 2.1
	 * @static
	 * @see SC()
	 * @return Sakura - Main instance.
	 */
	public static function instance() {
		if ( is_null( self::$_instance ) ) {
			self::$_instance = new self();
		}
		return self::$_instance;
	}

#+END_SRC

# ** initialization
# We can run our initialization codes in action [[https://github.com/woocommerce/woocommerce/blob/4.9.2/includes/class-woocommerce.php#L592][woocommerce_init]], which will be called after plugins loaded.

* Load the instance of main class
#+BEGIN_SRC php
/**
 * Returns the main instance of SC.
 *
 * @since  1.0
 * @return Sakura
 */
function SC() { // phpcs:ignore WordPress.NamingConventions.ValidFunctionName.FunctionNameInvalid
	return Sakura::instance();
}
// Global for backwards compatibility.
$GLOBALS['sakura'] = SC();
#+END_SRC
* A Widget for Sakura network
:PROPERTIES:
:header-args: :noweb yes :tangle no :noweb-ref sakura-widget
:END:
[[https://www.wpbeginner.com/wp-tutorials/how-to-create-a-custom-wordpress-widget/][How to Create a Custom WordPress Widget]]
** definition
#+BEGIN_SRC php :tangle ./src/sakura.php :noweb-ref ""
class Sakura_widget extends WP_Widget {
  <<sakura-widget>>
  // Class sakura_widget ends here
}
#+END_SRC
** construct
This is the part where we create the widget ID, title, and description.
#+BEGIN_SRC php
// Creating the widget
function __construct() {
    parent::__construct(

        // Base ID of your widget
        'Sakura_widget',

        // Widget name will appear in UI
        __('Sakura Network', 'sakura_widget_domain'),

        // Widget description
        array( 'description' => __('A widget for your Sakura network', 'sakura_widget_domain' ), )
    );
		add_action( 'admin_enqueue_scripts', array( $this, 'enqueue_scripts' ) );
		add_action( 'admin_footer-widgets.php', array( $this, 'print_scripts' ), 9999 );
  }
#+END_SRC
** enqueue scripts
Please note that we put =sakura.js= to end of the body, so it can apply resizer to iframes in the body.
#+BEGIN_SRC php
    /**
    * enqueue js files.
    */
    public function enqueue_scripts($hook_suffix) {
        if ( 'widgets.php' !== $hook_suffix ) {
            return;
        }

        wp_enqueue_style( 'wp-color-picker' );
        wp_enqueue_script( 'wp-color-picker' );
        wp_enqueue_script( 'underscore' );
    }
#+END_SRC
** print scripts
#+BEGIN_SRC php
	/**
	 * Print scripts.
	 *
	 * @since 1.0
	 */
	public function print_scripts() {
		?>
		<script>
			( function( $ ){
				function initColorPicker( widget ) {
					widget.find( '.sakura-color-field' ).wpColorPicker( {
                  defaultColor: "#f6f6f4",
                palettes: ['#f7edec', '#97a7a9', '#f6f6f4'],
            change: function(e, ui) {
                    $('.sakura-color-field').val(ui.color.toString());
                    $('.sakura-color-field').trigger('change');
                },
            clear: function(e, ui) {
                $(e.target).trigger('change')}
					});
				}

				function onFormUpdate( event, widget ) {
					initColorPicker( widget );
				}

				$( document ).on( 'widget-added widget-updated', onFormUpdate );

				$( document ).ready( function() {
					$( '#widgets-right .widget:has(.sakura-color-field)' ).each( function () {
						initColorPicker( $( this ) );
					} );
				} );
			}( jQuery ) );
		</script>
		<?php
	}
#+END_SRC

** widget
This is where we define the output generated by the widget.

We put the source articles in the local cookie to the URL when request widget from Sakura.eco.
It is an easy solution for now, and we can update it later if the URL size is too large.
#+BEGIN_SRC php
// Creating widget front-end
public function widget( $args, $instance ) {
    $query_args = array();

    if ( !empty( $instance[ 'network' ] ) ) {
        $query_args['network'] = $instance['network'];
    }
    if ( !empty( $instance[ 'bgcolor' ] ) ) {
        $query_args['bgcolor'] = $instance['bgcolor'];
    }
    if ( !empty( $instance[ 'font' ] ) ) {
        $query_args['font'] = $instance['font'];
    }

    $sakura_network_options = get_option( 'sakura_network_option' ); // Array of All Options
    $sakura_widget_key = $sakura_network_options['sakura_widget_key']; // Sakura Widget key

    $sakura_server = apply_filters('sakura_update_server_address', 'https://www.sakura.eco');
    $url = $sakura_server . '/widget/' . $sakura_widget_key;

    $history = SC()->sakura_history_in_cookie();
    if (isset($history)) {
        $query_args['history'] = $history;
    }

    if (SAKURA_SUPPORT_WOO) {
        $product = wc_get_product();
        if ($product) {
            $query_args['pid'] = $product->get_id();
            $query_args['sku'] = $product->get_sku();
        }
    }
    if (sizeof($query_args) > 0) {
        $url = $url . '?' . http_build_query($query_args);
    }

    // before and after widget arguments are defined by themes
    echo $args['before_widget'];
    // if ( ! empty( $title ) )
    //     echo $args['before_title'] . $title . $args['after_title'];

        // This is where you run the code and display the output
        ?>
        <iframe class="sakura" style="width: 100%; height: 433px; border: 0" src="<?php echo $url; ?>" title="Sakura Transparency Widget"></iframe>
    <?php
        echo $args['after_widget'];
    }

    #+END_SRC
** form
This part of the code is where we create the form with widget options for backend.

We can setup widget URL by wordpress's [[https://developer.wordpress.org/reference/functions/site_url/][site url]] automatically later.

The idea of select box is from [[https://wp-dreams.com/articles/2014/03/wordpress-widget-select-box/][WordPress – Widget select box]].
#+BEGIN_SRC php
    // Widget Backend
    public function form( $instance ) {
        do_action('sakura_record_activity', sprintf('form instance: %s', json_encode($instance)));
        if ( !empty( $instance[ 'network' ] ) ) {
            $network = (int)$instance['network'];
        } else {
            $network = 0;
        }
        $bgcolor = (!empty($instance['bgcolor'] ) ) ? $instance['bgcolor'] : '#f6f6f4';
        $font = (!empty($instance['font'] ) ) ? $instance['font'] : '';

        $sakura_network_options = get_option('sakura_network_option'); // array of all options
        $sakura_widget_key = $sakura_network_options['sakura_widget_key']; // sakura widget key
        if ( !isset ($sakura_widget_key)) {
            ?>
            <p>
            please setup widget key via <a href="/wp-admin/admin.php?page=sakura-network">sakura network menu</a>.
            </p>
            <?php
        }
        $networks = SC()->networks();
        if ($networks->{'status'} != 'success') {
            echo '<h3>';
            echo $networks->{'message'};
            echo '</h3>';
        } else {
            ?>
            <p>
            <label for="<?php echo $this->get_field_id('network'); ?>">Network: </label>
            <select class='widefat' id="<?php echo $this->get_field_id('network'); ?>"
                        name="<?php echo $this->get_field_name('network'); ?>" type="text">
                <option value=''<?php echo ($network==0)?'selected':''; ?>>
                    All networks
                </option>
                <?php
                    foreach( $networks->{'networks'} as $network_obj ) {
                    $id = $network_obj->{'id'};
                    $name = SC()->in_first_available_lang($network_obj->{'name'});
                    ?>
                        <option value='<?php echo $id ?>'<?php echo ($network==$id)?'selected':''; ?>>
                            <?php echo $name ?>
                        </option>
                    <?php
                    }
                ?>
                </select>
                </p>
            <p>
            <label for="<?php echo $this->get_field_id('bgcolor'); ?>">Background color:</label>
            <input class="widefat sakura-color-field" id="<?php echo $this->get_field_id('bgcolor'); ?>"
                    name="<?php echo $this->get_field_name('bgcolor'); ?>"
                    value="<?php echo $bgcolor; ?>" type="text" />
                </p>
            <p>
            <label for="<?php echo $this->get_field_id('font'); ?>">Font: </label>
            <select class='widefat' id="<?php echo $this->get_field_id('font'); ?>"
                        name="<?php echo $this->get_field_name('font'); ?>" type="text">
                <option value=''<?php echo ($font=='')?'selected':''; ?>>
                    Default
                </option>
                <option value='Montserrat'<?php echo ($font=='Montserrat')?'selected':''; ?>>
                    Montserrat
                </option>
                <option value='Avenir LT W04_65 Medium1475536'<?php echo ($font=='Avenir LT W04_65 Medium1475536')?'selected':''; ?>>
                    Avenir
                </option>
                <option value='Vesper Libre'<?php echo ($font=='Vesper Libre')?'selected':''; ?>>
                    Vesper Libre
                </option>
                <option value='IBM Plex Sans'<?php echo ($font=='IBM Plex Sans')?'selected':''; ?>>
                    IBM Plex Sans
                </option>
                </select>
                </p>
            <?php
        }
        // widget admin form
    }
#+END_SRC
** update
This is the part where we save widget options in the database.
#+BEGIN_SRC php
// Updating widget replacing old instances with new
    public function update( $new_instance, $old_instance ) {
        $instance = array();
        $instance['network'] = ( ! empty( $new_instance['network'] ) ) ? strip_tags( $new_instance['network'] ) : '';
        $instance['bgcolor'] = ( ! empty( $new_instance['bgcolor'] ) ) ? strip_tags( $new_instance['bgcolor'] ) : '';
        $instance['font'] = ( ! empty( $new_instance['font'] ) ) ? strip_tags( $new_instance['font'] ) : '';
        return $instance;
    }

#+END_SRC
** load widget
#+BEGIN_SRC php :tangle ./src/sakura.php :noweb-ref ""
// Register and load the widget
function sakura_load_widget() {
    register_widget( 'Sakura_widget' );
}
add_action( 'widgets_init', 'sakura_load_widget' );
#+END_SRC
* Sakura Network Setttings page
:PROPERTIES:
:header-args: :noweb yes :noweb-ref sakura-network-functions :tangle no
:END:
We need an admin page to set up company id and widget key in wordpress.
It will show in WordPress dashboard page.
** a class for this page
Generated by the WordPress Option Page generator at http://jeremyhixon.com/wp-tools/option-page/
#+BEGIN_SRC php :tangle ./src/sakura.php :noweb-ref ""
class SakuraNetwork {
  <<sakura-network-vars>>
  <<sakura-network-functions>>
}
#+END_SRC
** a value to hold the options
#+BEGIN_SRC php :noweb-ref sakura-network-vars
	private $sakura_network_options;
#+END_SRC
** contruct to add hooks
#+BEGIN_SRC php
	public function __construct() {
		add_action( 'admin_menu', array( $this, 'sakura_network_add_plugin_page' ) );
		add_action( 'admin_init', array( $this, 'sakura_network_page_init' ) );
	}
#+END_SRC
** add menu for setting page
#+BEGIN_SRC php
	public function sakura_network_add_plugin_page() {
		add_menu_page(
			'Sakura Network', // page_title
			'Sakura Network', // menu_title
			'manage_options', // capability
			'sakura-network', // menu_slug
			array( $this, 'sakura_network_create_admin_page' ), // function
			'dashicons-admin-settings', // icon_url
			2 // position
		);
	}
#+END_SRC
** add setting page
#+BEGIN_SRC php
	public function sakura_network_create_admin_page() {
		$this->sakura_network_options = get_option( 'sakura_network_option' ); ?>

		<div class="wrap">
			<h2>Sakura Network</h2>
			<p>Sakura Network Options</p>
			<?php settings_errors(); ?>

			<form method="post" action="options.php">
				<?php
					settings_fields( 'sakura_network_option_group' );
					do_settings_sections( 'sakura-network-admin' );
					submit_button();
				?>
			</form>
		</div>
	<?php }
#+END_SRC
** initialize page
#+BEGIN_SRC php
	public function sakura_network_page_init() {
		register_setting(
			'sakura_network_option_group', // option_group
			'sakura_network_option', // option_name
			array( $this, 'sakura_network_sanitize' ) // sanitize_callback
		);

		add_settings_section(
			'sakura_network_setting_section', // id
			'Settings', // title
			array( $this, 'sakura_network_section_info' ), // callback
			'sakura-network-admin' // page
		);

		add_settings_field(
			'sakura_widget_key', // id
			'Sakura Widget Key', // title
			array( $this, 'sakura_widget_key_callback' ), // callback
			'sakura-network-admin', // page
			'sakura_network_setting_section' // section
		);

    add_settings_field(
        'sakura_secret_key', // id
        'Sakura Secret Key', // title
        array( $this, 'sakura_secret_key_callback' ), // callback
        'sakura-network-admin', // page
        'sakura_network_setting_section' // section
    );

		add_settings_field(
			'sakura_email_receipt', // id
			'Include widget in new order email receipt', // title
			array( $this, 'sakura_email_receipt_callback' ), // callback
			'sakura-network-admin', // page
			'sakura_network_setting_section' // section
		);

		add_settings_field(
			'sakura_include_in_cart', // id
			'Include widget in cart page', // title
			array( $this, 'sakura_include_in_cart_callback' ), // callback
			'sakura-network-admin', // page
			'sakura_network_setting_section' // section
		);

		add_settings_field(
			'sakura_include_in_receipt', // id
			'Include widget in receipt page', // title
			array( $this, 'sakura_include_in_receipt_callback' ), // callback
			'sakura-network-admin', // page
			'sakura_network_setting_section' // section
		);

		add_settings_field(
			'sakura_include_in_thank_you', // id
			'Include widget in thank you page', // title
			array( $this, 'sakura_include_in_thank_you_callback' ), // callback
			'sakura-network-admin', // page
			'sakura_network_setting_section' // section
		);
	}
#+END_SRC
** sanitize_callback
#+BEGIN_SRC php
	public function sakura_network_sanitize($input) {
		$sanitary_values = array();
		if ( isset( $input['sakura_widget_key'] ) ) {
			$sanitary_values['sakura_widget_key'] = sanitize_text_field( $input['sakura_widget_key'] );
		}

    if ( isset( $input['sakura_secret_key'] ) ) {
  		$sanitary_values['sakura_secret_key'] = sanitize_text_field( $input['sakura_secret_key'] );
  	}

		if ( isset( $input['sakura_email_receipt'] ) ) {
			$sanitary_values['sakura_email_receipt'] = sanitize_text_field( $input['sakura_email_receipt'] );
		}

		if ( isset( $input['sakura_include_in_cart'] ) ) {
			$sanitary_values['sakura_include_in_cart'] = sanitize_text_field( $input['sakura_include_in_cart'] );
		}

		if ( isset( $input['sakura_include_in_receipt'] ) ) {
			$sanitary_values['sakura_include_in_receipt'] = sanitize_text_field( $input['sakura_include_in_receipt'] );
		}

		if ( isset( $input['sakura_include_in_thank_you'] ) ) {
			$sanitary_values['sakura_include_in_thank_you'] = sanitize_text_field( $input['sakura_include_in_thank_you'] );
		}

		return $sanitary_values;
	}
#+END_SRC
** section info
#+BEGIN_SRC php
	public function sakura_network_section_info() {

	}
#+END_SRC
** callback for widget key
#+BEGIN_SRC php
	public function sakura_widget_key_callback() {
		printf(
			'<input class="regular-text" type="text" name="sakura_network_option[sakura_widget_key]" id="sakura_widget_key" value="%s">',
			isset( $this->sakura_network_options['sakura_widget_key'] ) ? esc_attr( $this->sakura_network_options['sakura_widget_key']) : ''
		);
	}

#+END_SRC
** callback for secret key
#+BEGIN_SRC php
	public function sakura_secret_key_callback() {
		printf(
			'<input class="regular-text" type="text" name="sakura_network_option[sakura_secret_key]" id="sakura_secret_key" value="%s">',
			isset( $this->sakura_network_options['sakura_secret_key'] ) ? esc_attr( $this->sakura_network_options['sakura_secret_key']) : ''
		);
	}

#+END_SRC
** callback for including widget in email receipt
#+BEGIN_SRC php
    public function sakura_email_receipt_callback() {
        $sakura_email_receipt = false;
        if (isset( $this->sakura_network_options['sakura_email_receipt'] )) {
            $sakura_email_receipt = $this->sakura_network_options['sakura_email_receipt'];
        }
        $html = '<input type="checkbox" id="sakura_email_receipt" name="sakura_network_option[sakura_email_receipt]" value="1"'
            . checked( 1, $sakura_email_receipt, false ) . '/>';
        $html .= '<label for="sakura_email_receipt_key">Include widget in new order email receipt</label>';

        printf($html);
    }
#+END_SRC
** callback for including widget in cart(Shopping basket)
#+BEGIN_SRC php
    public function sakura_include_in_cart_callback() {
        $sakura_include_in_cart = false;
        if (isset( $this->sakura_network_options['sakura_include_in_cart'] )) {
            $sakura_include_in_cart = $this->sakura_network_options['sakura_include_in_cart'];
        }
        $html = '<input type="checkbox" id="sakura_include_in_cart" name="sakura_network_option[sakura_include_in_cart]" value="1"'
            . checked( 1, $sakura_include_in_cart, false ) . '/>';
        $html .= '<label for="sakura_include_in_cart_key">Include widget in cart page</label>';

        printf($html);
    }
#+END_SRC
** callback for including widget in receipt page
#+BEGIN_SRC php
    public function sakura_include_in_receipt_callback() {
        $sakura_include_in_receipt = false;
        if (isset( $this->sakura_network_options['sakura_include_in_receipt'] )) {
            $sakura_include_in_receipt = $this->sakura_network_options['sakura_include_in_receipt'];
        }
        $html = '<input type="checkbox" id="sakura_include_in_receipt" name="sakura_network_option[sakura_include_in_receipt]" value="1"'
            . checked( 1, $sakura_include_in_receipt, false ) . '/>';
        $html .= '<label for="sakura_include_in_receipt_key">Include widget in receipt page</label>';

        printf($html);
    }
#+END_SRC
** callback for including widget in thank you page
#+BEGIN_SRC php
    public function sakura_include_in_thank_you_callback() {
        $sakura_include_in_thank_you = false;
        if (isset( $this->sakura_network_options['sakura_include_in_thank_you'] )) {
            $sakura_include_in_thank_you = $this->sakura_network_options['sakura_include_in_thank_you'];
        }
        $html = '<input type="checkbox" id="sakura_include_in_thank_you" name="sakura_network_option[sakura_include_in_thank_you]" value="1"'
            . checked( 1, $sakura_include_in_thank_you, false ) . '/>';
        $html .= '<label for="sakura_include_in_thank_you_key">Include widget in thank you page</label>';

        printf($html);
    }
#+END_SRC
** create setting page if admin
#+BEGIN_SRC php :tangle ./src/sakura.php :noweb-ref ""
if ( is_admin() )
	$sakura_network = new SakuraNetwork();
#+END_SRC
** how to retrive setting value
#+BEGIN_SRC php :tangle no :noweb-ref ""
/*
 * Retrieve this value with:
 * $sakura_network_options = get_option( 'sakura_network_option' ); // Array of All Options
 * $sakura_widget_key = $sakura_network_options['sakura_widget_key']; // Sakura Widget key
 */
#+END_SRC
* Export products/pages/posts to Sakura
:PROPERTIES:
:header-args: :noweb yes :noweb-ref bunk-export-functions :tangle no
:END:
** a class for this page
#+BEGIN_SRC php :tangle ./src/sakura.php :noweb-ref ""
class BulkExport {
  <<bunk-export-functions>>
}
#+END_SRC
** contruct to add hooks
#+BEGIN_SRC php
    public function __construct() {
        add_filter( 'bulk_actions-edit-product', array( $this, 'register_my_bulk_actions' ));
        add_filter( 'handle_bulk_actions-edit-product', array( $this, 'my_bulk_action_handler'), 10, 3 );
        add_action( 'admin_notices', array($this, 'my_bulk_action_admin_notice' ));
    }
#+END_SRC
** register_my_bulk_actions
#+BEGIN_SRC php
  function register_my_bulk_actions($bulk_actions) {
    $bulk_actions['export_to_sakura'] = __( 'Export to Sakura', 'export_to_sakura');
    return $bulk_actions;
  }
#+END_SRC
** bulk_action_handler
#+BEGIN_SRC php
  function my_bulk_action_handler( $redirect_to, $doaction, $post_ids ) {

    if ( $doaction !== 'export_to_sakura' ) {
      return $redirect_to;
    }

    $sakura_network_options = get_option('sakura_network_option'); // Array of All Options

    $allProducts = array();
    $payload = array();
    $payload['sakura_widget_key'] = $sakura_network_options['sakura_widget_key'];;
    $payload['sakura_secret_key'] = $sakura_network_options['sakura_secret_key'];
    $payload['currency'] = get_woocommerce_currency();

    foreach ( $post_ids as $post_id ) {
      $prod = wc_get_product( $post_id );

      // tags
      $terms = get_the_terms( $post_id, 'product_tag' );
      $termsString = '';

      if (is_array($terms))
      {
        foreach ($terms as $tag) {
          $termsString = $termsString . $tag->to_array()['name'] . ', ';
        }
        $termsString = substr($termsString, 0, strlen($termsString) - 2);
      }

      $image_url = wp_get_attachment_image_src(
        get_post_thumbnail_id( $post_id ), 'single-post-thumbnail' );
      $permalink = $prod->get_permalink();

      $prod_m = $prod->get_data();

      if (is_array($image_url))
        $prod_m['img_url'] = $image_url[0];
      else
        $prod_m['img_url'] = '';
      $prod_m['permalink'] = $permalink;
      $prod_m['tags'] = $termsString;

      array_push($allProducts, $prod_m);
    }
    $payload['all_products'] = $allProducts;

    $http_args = array(
      'method'      => 'POST',
      'timeout'     => MINUTE_IN_SECONDS,
      'redirection' => 0,
      'httpversion' => '1.0',
      'blocking'    => true,
      'user-agent'  => sprintf('WooCommerce Hookshot (WordPress/%s)', $GLOBALS['wp_version']),
      'body'        => trim(wp_json_encode($payload)),
      'headers'     => array(
          'Content-Type' => 'application/json',
      ),
      'cookies'     => array(),
    );

    $sakura_server = apply_filters('sakura_update_server_address', 'https://www.sakura.eco');
    $response = wp_safe_remote_request(sprintf('%s/api/addWCProducts', $sakura_server), $http_args);

    $countPosts = 0;
    // sanity check
    if ($response) {
      $countPosts = count( $post_ids );
    }

    $redirect_to = add_query_arg( 'bulk_export_posts', $countPosts, $redirect_to );

    return $redirect_to;
  }
#+END_SRC
** admin_notice
#+BEGIN_SRC php
  function my_bulk_action_admin_notice() {
    if ( ! empty( $_REQUEST['bulk_export_posts'] ) ) {
      $export_count = intval( $_REQUEST['bulk_export_posts'] );
      if ($export_count > 0) {
      printf( '<div id="message" class="updated fade">' .
        _n( 'Exported %s post to Sakura',
          'Exported %s posts to Sakura',
          $export_count,
          'export_to_sakura'
        ) . '</div>', $export_count );
      }
    }
  }
#+END_SRC

** create bunk export in admin
#+BEGIN_SRC php :tangle ./src/sakura.php :noweb-ref ""
if ( is_admin() )
  $bulk_export = new BulkExport();
#+END_SRC

* Javascript codes
:PROPERTIES:
:header-args: :results silent :noweb yes :tangle ./src/js/sakura.js
:END:
** resize sakura widget's height to fit with content
#+BEGIN_SRC js
iFrameResize({
    log                     : false,                  // Disable console logging
    // maxHeight: 400,
		checkOrigin: false, // ["https://www.sakura.eco"],
    onResized         : function(messageData){ // Callback fn when resize is received
	// console.log(
	//     '<b>Frame ID:</b> '    + messageData.iframe.id +
	//     ' <b>Height:</b> '     + messageData.height +
	//     ' <b>Width:</b> '      + messageData.width +
	//     ' <b>Event type:</b> ' + messageData.type
	// );
    },
    onMessage         : function(messageData){ // Callback fn when message is received
	// console.log(
	//     '<b>Frame ID:</b> '    + messageData.iframe.id +
	//     ' <b>Message:</b> '    + messageData.message
	// );
	// alert(messageData.message);
    },
    onClosed         : function(id){ // Callback fn when iFrame is closed
	// console.log(
	//     '<b>IFrame (</b>'    + id +
	//     '<b>) removed from page.</b>'
	// );
    }
}, '.sakura');
#+END_SRC

* A new block in post/page editor
We initialize the block related codes via [[https://www.npmjs.com/package/@wordpress/create-block][@wordpress/create-block]] with some modification.
Please reference [[https://developer.wordpress.org/block-editor/handbook/tutorials/create-block/][block editor]] for a tutorial.
** environment setup
#+BEGIN_SRC sh :tangle no
yarn install
yarn build # or 'yarn dev' for development build.
#+END_SRC
** Registers all block assets
[[https://developer.wordpress.org/block-editor/tutorials/block-tutorial/applying-styles-with-stylesheets/][Applying Styles From a Stylesheet]]
#+BEGIN_SRC php :noweb yes :tangle no :noweb-ref sakura-main-class
    /**
    * Registers all block assets so that they can be enqueued through the block editor
    * in the corresponding context.
    */
    public function init_block() {
        $dir = plugin_dir_path( SAKURA_PLUGIN_FILE );

        $script_asset_path = "$dir/build/index.asset.php";
        $index_js     = 'build/index.js';
        $script_asset = require( $script_asset_path );
        wp_register_script(
            'sakura-network-block-editor',
            plugins_url( $index_js, SAKURA_PLUGIN_FILE),
            $script_asset['dependencies'],
            $script_asset['version']
        );
        wp_set_script_translations( 'sakura-network-block-editor', 'sakura-network' );

        $editor_css = 'build/index.css';
        wp_register_style(
            'sakura-network-block-editor',
            plugins_url( $editor_css, __FILE__ ),
            array(),
            filemtime( "$dir/$editor_css" )
        );

        $style_css = 'build/style-index.css';
        wp_register_style(
            'sakura-network-block',
            plugins_url( $style_css, __FILE__ ),
            array(),
            filemtime( "$dir/$style_css" )
        );

        register_block_type(
            'sakura-network/sakura-network',
            array(
                'render_callback' => array( $this, 'block_render_callback' ),
                'editor_script' => 'sakura-network-block-editor',
                'attributes'      => [
                    'network' => [
                    'default' => '0',
                    'type'    => 'string'
                ],
                    'bgcolor' => [
                    'default' => '',
                    'type'    => 'string'
                ],
                    'font' => [
                    'default' => '',
                    'type'    => 'string'
                ]
    ],
                'editor_style'  => 'sakura-network-block-editor',
                'style'         => 'sakura-network-block'
            )
        );
    }
#+END_SRC
** Render callback for the block
- [[https://github.com/WordPress/gutenberg/blob/master/docs/designers-developers/developers/tutorials/block-tutorial/creating-dynamic-blocks.md][Creating dynamic blocks]]
- [[https://gist.github.com/Shelob9/144055408101e2fdfc4bf34adc85dd04][server side block]]
#+BEGIN_SRC php :noweb yes :tangle no :noweb-ref sakura-main-class
    /**
    * The render callback for block Sakura network.
    */
    public function block_render_callback($attributes, $content) {
        $network = $attributes['network'];
        do_action('sakura_record_activity', sprintf('block_render_callback, network:%s', $network));
        do_action('sakura_record_activity', sprintf('block_render_callback, content:%s', $content));
        $query_args = array();

        if ($network != 0) {
            $query_args['network'] = $network;
        }
        $bgcolor = $attributes['bgcolor'];
        if (! empty($bgcolor)) {
            $query_args['bgcolor'] = $bgcolor;
        }
        $font = $attributes['font'];
        if (! empty($font)) {
            $query_args['font'] = $font;
        }

        $sakura_network_options = get_option( 'sakura_network_option' ); // Array of All Options
        $sakura_widget_key = $sakura_network_options['sakura_widget_key']; // Sakura Widget key

        $sakura_server = apply_filters('sakura_update_server_address', 'https://www.sakura.eco');
        $url = $sakura_server . '/widget/' . $sakura_widget_key;

        $history = SC()->sakura_history_in_cookie();
        if (isset($history)) {
            $query_args['history'] = $history;
        }
        if (SAKURA_SUPPORT_WOO) {
            $product = wc_get_product();
            if ($product) {
                $query_args['pid'] = $product->get_id();
                $query_args['sku'] = $product->get_sku();
            }
        }

        if (sizeof($query_args) > 0) {
            $url = $url . '?' . http_build_query($query_args);
        }

        return '<iframe class="sakura" style="width: 100%; height: 433px; border: 0" src="'
                . $url . '" title="Sakura Transparency Widget"></iframe>';
    }
#+END_SRC

** scss style for editor
:PROPERTIES:
:literate-lang: scss
:header-args: :tangle ./src/editor.scss
:END:
#+BEGIN_SRC scss
.wp-block-create-block-sakura-network {
	border: 1px dotted #f00;
}

#+END_SRC
** scss style for front
:PROPERTIES:
:literate-lang: scss
:header-args: :tangle ./src/style.scss
:END:
#+BEGIN_SRC php
.wp-block-create-block-sakura-network {
	background-color: var(--wp-admin-theme-color);
	color: #fff;
	padding: 2px;
}
#+END_SRC
** Javascript for the block
:PROPERTIES:
:literate-lang: js
:header-args: :tangle ./src/index.js
:END:
*** import dependencies
#+BEGIN_SRC js
/**
 * Registers a new block provided a unique name and an object defining its behavior.
 *
 * @see https://developer.wordpress.org/block-editor/developers/block-api/#registering-a-block
 */
import { registerBlockType } from '@wordpress/blocks';

import { SelectControl, ColorPalette } from '@wordpress/components';

/**
 * Retrieves the translation of text.
 *
 * @see https://developer.wordpress.org/block-editor/packages/packages-i18n/
 */
import { __ } from '@wordpress/i18n';

/**
 * Lets webpack process CSS, SASS or SCSS files referenced in JavaScript files.
 * All files containing `style` keyword are bundled together. The code used
 * gets applied both to the front of your site and to the editor.
 *
 * @see https://www.npmjs.com/package/@wordpress/scripts#using-css
 */
import './style.scss';
import './editor.scss';

/**
 * React hook that is used to mark the block wrapper element.
 * It provides all the necessary props like the class name.
 *
 * @see https://developer.wordpress.org/block-editor/packages/packages-block-editor/#useBlockProps
 */
import { useBlockProps } from '@wordpress/block-editor';

#+END_SRC
*** edit function
TODO: select color by [[https://developer.wordpress.org/block-editor/reference-guides/components/color-palette/][color palette]]
#+BEGIN_SRC js
function Edit( props ) {
		if (_sakura_networks.status != "success") {
				return <h3> Failed to get your networks list from Sakura Server! </h3>
		}

		var networks_options =
				[{value: 0, label: 'All'}].concat(
						_sakura_networks.networks.map( network =>
								{ var o = new Object();
									o.value = network.id;
									if (typeof network.name === 'string') {
											o.label = network.name;
									} else if (network.name.en) {
											o.label = network.name.en;
									} else if (network.name.no) {
											o.label = network.name.no;
									} else {
											o.label = '';
									}
									return o;}));
		var bgcolor_options = [{value: '', label: 'Default'},
													 {value: '#f7edec', label: 'Red'},
													 {value: '#97a7a9', label: 'Blue'}];

		var font_options = [{value: '', label: 'Default'},
													 {value: 'Montserrat', label: 'Montserrat'},
												{value: 'Avenir LT W04_65 Medium1475536', label: 'Avenir'},
												{value: 'Vesper Libre', label: 'Vesper Libre'},
													 {value: 'IBM Plex Sans', label: 'IBM Plex Sans'}];

		return (
				[
								<SelectControl
						label={ __( 'Target network:' ) }
						value={ props.attributes.network }
						onChange={( network ) => { props.setAttributes ({network: network })}}
						options={ networks_options }
								/>,
								<SelectControl
						label={ __( 'Background color:' ) }
						value={ props.attributes.bgcolor }
						onChange={( bgcolor ) => { props.setAttributes ({bgcolor: bgcolor })}}
						options={ bgcolor_options }
								/>,
								<SelectControl
						label={ __( 'Widget font:' ) }
						value={ props.attributes.font }
						onChange={( font ) => { props.setAttributes ({font: font })}}
						options={ font_options }
								/>,
				]);
}
#+END_SRC
*** register block
[[https://github.com/WordPress/gutenberg/issues/15545#issuecomment-491111639][how to get value of a select control]]
#+BEGIN_SRC js
/**
 * Every block starts by registering a new block type definition.
 *
 * @see https://developer.wordpress.org/block-editor/developers/block-api/#registering-a-block
 */
registerBlockType( 'sakura-network/sakura-network', {
		/**
		 * @see https://make.wordpress.org/core/2020/11/18/block-api-version-2/
		 */
		apiVersion: 2,

		/**
		 * This is the display title for your block, which can be translated with `i18n` functions.
		 * The block inserter will show this name.
		 */
		title: __( 'Sakura Network', 'sakura-network' ),

		/**
		 * This is a short description for your block, can be translated with `i18n` functions.
		 * It will be shown in the Block Tab in the Settings Sidebar.
		 */
		description: __(
				'Insert Sakura Network into your post or page.',
				'sakura-network'
		),

		/**
		 * Blocks are grouped into categories to help users browse and discover them.
		 * The categories provided by core are `text`, `media`, `design`, `widgets`, and `embed`.
		 */
		category: 'widgets',

		/**
		 * An icon property should be specified to make it easier to identify a block.
		 * These can be any of WordPress’ Dashicons, or a custom svg element.
		 */
		icon: 'networking',

		/**
		 * Optional block extended support features.
		 */
		// supports: {
		// 		// Removes support for an HTML mode.
		// 		html: false,
		// },
		attributes: {
				network: {
						type: 'string',
						default: '0',
				},
				bgcolor: {
						type: 'string',
						default: '',
				},
				font: {
						type: 'string',
						default: '',
				},
		},
		edit: Edit,

		save: function ( props ) {
	return null;
}
} );
#+END_SRC

* Plugin for Sakura development environment
:PROPERTIES:
:header-args: :tangle ./sakura_dev.php
:END:
In development environment, we need some additional setup, this is done by an additional WordPress plugin,
which added some filters to change the behavior of the official Sakura plugin.
It should not be included in official environment.
** headers for this plugin
#+BEGIN_SRC php
<?php
/**
 * @package The development plugin for Sakura Network.
 * @version 1.0.7
 */
/*
Plugin Name: Sakura network internal development
Plugin URI: https://www.sakura.eco/
Description: This is just a plugin for development use only, to make us local development easy.
Author: Sakura.eco
Version: 1.0.7
Author URI: https://www.sakura.eco/
*/
#+END_SRC

** disable rejecting unsafe urls by a WordPress filter
This idea comes from [[https://dev.to/manuelmolina97/handling-multiple-environments-in-raw-php-3788][this link]] and [[https://wordpress.org/support/topic/wp-http-error-curl-error-60-ssl-certificate-problem-self-signed-certificate/][here]].
As our local development use a http request or a self signed https cert, we have to disable the rejecting of unsafe urls.
Otherwise =wp_safe_remote_request= will fail.
#+BEGIN_SRC php
    add_filter( 'http_request_args', function ( $args ) {

        $args['reject_unsafe_urls'] = false;
        $args['sslverify'] = false;

        return $args;
    }, 999 );
#+END_SRC
** return Sakura server address from a local file.
It is very convenient for our development and test environment before release to product environment.
#+BEGIN_SRC php
// Ensure get_home_path() is declared.
require_once ABSPATH . 'wp-admin/includes/file.php';

function read_sakura_server_for_dev ($arg) {
  return trim(file_get_contents( get_home_path() . 'sakura_address.txt'));
}
add_filter( 'sakura_update_server_address', 'read_sakura_server_for_dev', 999 );
#+END_SRC
** log activities from our plugin
We can also take use of [[https://querymonitor.com/docs/logging-variables/][Query Monitor]] to log messages.
#+BEGIN_SRC php
function log_sakura_plugin_activity ($message) {
    do_action( 'qm/notice', $message );
    if (is_string($message)) {
        error_log($message);
    } else if ($message instanceof WP_Error) {
        error_log(sprintf('WP_Error:#%s', json_encode($message->get_error_messages())));
    } else {
        error_log(json_encode($message));
    }
}
add_action( 'sakura_record_activity', 'log_sakura_plugin_activity');
#+END_SRC
** write email messages to local test file.
We need to add our widget to the email receipt.
In a local test, we will write the email content to a local file to review it easily without a real mail delivery.
#+BEGIN_SRC php
function log_sakura_receipt ($message) {
    file_put_contents(get_home_path() . 'wc-mail.html', $message);
    return $message;
}
add_filter( 'woocommerce_mail_content', 'log_sakura_receipt', 999 );
#+END_SRC

* Deploy to local development environment
:PROPERTIES:
:header-args: :tangle no
:END:
** install database
#+BEGIN_SRC sh
mkdir -p /data/sakura/shops/shop1db
cd /data/sakura/shops/shop1db
docker run -e MYSQL_ROOT_PASSWORD=shop1_WS -e MYSQL_DATABASE=wordpress --name shop1db -v "$PWD/database":/var/lib/mysql -d mariadb:latest
mkdir -p /data/sakura/shops/shop2db
cd /data/sakura/shops/shop2db
docker run -e MYSQL_ROOT_PASSWORD=shop2_WS -e MYSQL_DATABASE=wordpress --name shop2db -v "$PWD/database":/var/lib/mysql -d mariadb:latest
#+END_SRC
** install wordpress
#+BEGIN_SRC php
mkdir -p /data/sakura/shops/shop1
cd /data/sakura/shops/shop1
docker run -e WORDPRESS_DB_PASSWORD=shop1_WS --name shop1 --link shop1db:mysql -p 127.0.0.1:6100:80 -v "$PWD/html":/var/www/html -d wordpress
mkdir -p /data/sakura/shops/shop2
cd /data/sakura/shops/shop2
docker run -e WORDPRESS_DB_PASSWORD=shop2_WS --name shop2 --link shop2db:mysql -p 127.0.0.1:6200:80 -v "$PWD/html":/var/www/html -d wordpress
#+END_SRC

** generate certs
Write a config file for cert
#+BEGIN_SRC conf
[req]
distinguished_name = req_distinguished_name
x509_extensions = v3_req
prompt = no
[req_distinguished_name]
C = CN
ST = ZJ
L = HZ
O = Sakura
OU = Sakura
CN = Sakura
[v3_req]
keyUsage = keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names
[alt_names]
DNS.1 = shop1.localhost
DNS.2 = shop2.localhost
#+END_SRC
Then run the following command:
#+BEGIN_SRC sh
openssl req -x509 -nodes -days 1024 -newkey rsa:2048 -keyout localhost.key -out localhost.crt -config ssl.conf -extensions 'v3_req'
certutil -d sql:$HOME/.pki/nssdb -A -t "CT,c,c" -n "localhost" -i localhost.crt
#+END_SRC

** setup nginx for shop1 & shop2
For example
#+BEGIN_SRC conf
upstream shop1_localhost_server {
    server 127.0.0.1:6100;
}

server {
	listen 443 ssl;
        server_name shop1.localhost;
	ssl_certificate /data/sakura/shops/shop1/local_ssl/localhost.crt;
        ssl_certificate_key /data/sakura/shops/shop1/local_ssl/localhost.key;
        ssl_protocols TLSv1.2 TLSv1.1 TLSv1;
    location / {
      access_log /data/sakura/shops/shop1/html/access.log;
      error_log /data/sakura/shops/shop1/html/error.log;
      proxy_pass http://shop1_localhost_server;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    error_page 404 /404.html;
        location = /40x.html {
    }

    error_page 500 502 503 504 /50x.html;
        location = /50x.html {
    }
}
server {
    listen 80;
    server_name shop1.localhost;
    location / {
      access_log /data/sakura/shops/shop1/html/access.log;
      error_log /data/sakura/shops/shop1/html/error.log;
      proxy_pass http://shop1_localhost_server;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}


#+END_SRC

** install plugin
You can copy it to local WordPress plugin directory.

For example:
#+BEGIN_SRC sh
for shop in shop1 shop2
do
		wp=/data/sakura/shops/$shop/html/wp-content/plugins
		echo setup sakura in $wp
		sudo mkdir -p $wp/sakura
		sudo mkdir -p $wp/sakura_dev
    echo 'https://sakura.localhost' | sudo tee $wp/../../sakura_address.txt
		echo cp to $wp/sakura_dev/
		sudo cp sakura_dev.php $wp/sakura_dev/
		sudo cp -fr src/* $wp/sakura/
done
#+END_SRC

#+RESULTS:
| setup                    | sakura | in                                                           | /data/sakura/shops/shop1/html/wp-content/plugins |
| https://sakura.localhost |        |                                                              |                                                  |
| cp                       | to     | /data/sakura/shops/shop1/html/wp-content/plugins/sakura_dev/ |                                                  |
| setup                    | sakura | in                                                           | /data/sakura/shops/shop2/html/wp-content/plugins |
| https://sakura.localhost |        |                                                              |                                                  |
| cp                       | to     | /data/sakura/shops/shop2/html/wp-content/plugins/sakura_dev/ |                                                  |

=sakura.localhost= will point to localhost and has trusted self signed certs.

Then you can active them in your WordPress admin page.

* Plugin Description
:PROPERTIES:
:header-args: :tangle ./src/readme.txt
:END:
** Summary
#+BEGIN_SRC php
=== Sakura Network ===
Contributors: sakura.eco
Tags: e-commerce, sales, sell, woo, shop, woo commerce
Requires at least: 5.4
Tested up to: 5.6
Requires PHP: 7.0
Stable tag: 1.0.7
License: GPLv3
License URI: https://www.gnu.org/licenses/gpl-3.0.html

Sales is all about traffic to your website - with Sakura you will access all the combined traffic from your cooperating network.

#+END_SRC
** description
#+BEGIN_SRC php
== Description ==

Start cooperating now and turn your website into a networking and distributing global marketplace, using sakura one-click discovery. It is really easy to share traffic. Just register, upload your profile and products and find a suitable network to start cooperating. You can cooperate locally and globally to attract new customers and even more relevant traffic world wide. It is free to join as a member, and also to build your own network.

- **Register** to become a member or create your own network in [Sakura.eco](https://www.sakura.eco).
- **Install** the Sakura networks plugin and add the discovery on your website and import products /articles from your website.

You can discover networks and other members in [Sakura.eco](https://www.sakura.eco) and request to become a member/ or start your own network cooperating on traffic.

We offer you a dashboard with real time statistics making it easy to track traffic and orders deriving from participating in Networks.

You decide which products you want to publish in the discovery and share with your network, and you can track their views and all orders from each network you are in.

[Sakura.eco](https://www.sakura.eco) has their own discovery, where all our members can be available, it is optional to join our main Sakura network discovery.
#+END_SRC
** installation
#+BEGIN_SRC php
== Installation ==

= Minimum Requirements =

,* PHP 7.2 or greater is recommended
,* MySQL 5.6 or greater is recommended

= Automatic installation =

Automatic installation is the easiest option -- WordPress will handles the file transfer, and you won’t need to leave your web browser. To do an automatic install of Sakura network, log in to your WordPress dashboard, navigate to the Plugins menu, and click “Add New.”

In the search field type “Sakura,” then click “Search Plugins.” Once you’ve found us,  you can view details about it such as the point release, rating, and description. Most importantly of course, you can install it by! Click “Install Now,” and WordPress will take it from there.

= Manual installation =

Manual installation method requires downloading the Sakura network plugin and uploading it to your web server via your favorite FTP application. The WordPress codex contains [instructions on how to do this here](https://wordpress.org/support/article/managing-plugins/#manual-plugin-installation).

= Updating =

Automatic updates should work smoothly, but we still recommend you back up your site.

If you encounter issues with the shop/category pages after an update, flush the permalinks by going to WordPress > Settings > Permalinks and hitting “Save.” That should return things to normal.


#+END_SRC
** changelog
#+BEGIN_SRC txt
== Changelog ==

= 1.0.7 - 2021-04-15 =

**Sakura network**

,* new feature: record price and currency for an order.


= 1.0.6 - 2021-04-05 =

**Sakura network**

,* bug fix: fix the way to extract i18n value.

= 1.0.5 - 2021-04-05 =

**Sakura network**

,* bug fix: fix the default value of network and backgroud color.

= 1.0.4 - 2021-04-04 =

**Sakura network**

,* sync stock status to Sakura Server, to filter out sold products in Sakura network.
,* bug fix: enable sakura network even WooCommerce is not active.

= 1.0.3 - 2021-03-26 =

**Sakura network**

,* Add support to include Sakura widget in Shopping basket/receipt page /thank you page.
,* Add a simple support to import products into sakura network.

= 1.0.2 - 2021-03-25 =

**Sakura network**

,* Include Sakura widget in the email receipt.

= 1.0.1 - 2021-03-12 =

**Sakura network**

,* Insert Sakura network in an individual post or page as a block.
,* Update font family and background color based on user's option.

= 1.0.0 - 2021-02-26 =

**Sakura network**

,* The first official release.
#+END_SRC
* Build
:PROPERTIES:
:literate-lang: sh
:header-args: :noweb yes :tangle no :noweb-ref build-zip
:END:
** definition
#+BEGIN_SRC sh

PLUGIN_SLUG="sakura"
PROJECT_PATH=$(pwd)
BUILD_PATH="${PROJECT_PATH}/build"
DEST_PATH="$BUILD_PATH/$PLUGIN_SLUG"

#+END_SRC
** initialization
#+BEGIN_SRC sh
echo "Generating build directory..."
rm -rf "$BUILD_PATH"
mkdir -p "$DEST_PATH"

#+END_SRC
** Prepare files
#+BEGIN_SRC sh
yarn install
yarn build
rsync -rc "$PROJECT_PATH/src/" "$DEST_PATH/" --delete --delete-excluded
#+END_SRC

** Generating zip file
#+BEGIN_SRC sh
echo "Generating zip file..."
cd "$BUILD_PATH" || exit
zip -q -r "${PLUGIN_SLUG}.zip" "$PLUGIN_SLUG/"

#+END_SRC
** move zip file to root directory
#+BEGIN_SRC sh
cd "$PROJECT_PATH" || exit
mv "$BUILD_PATH/${PLUGIN_SLUG}.zip" "$PROJECT_PATH"
echo "${PLUGIN_SLUG}.zip file generated!"

echo "Build done!"

#+END_SRC
** execute
#+BEGIN_SRC sh :tangle ./build-zip.sh :noweb yes :noweb-ref "" :shebang #!/bin/sh
<<build-zip>>
#+END_SRC

#+RESULTS:
| Generating | build | directory... |
| Generating | zip   | file...      |
| sakura.zip | file  | generated!   |
| Build      | done! |              |

** deploy online
#+BEGIN_SRC sh
# ssh petter mkdir -p /srv/public/download/wordpress/
scp sakura.zip petter:/srv/public/download/wordpress/
#+END_SRC

#+RESULTS:

* Upload to WordPress.org svn repository
** References
- [[https://wordpress.org/plugins/sakura-network/][Sakura Network in WordPress]]
- [[https://plugins.svn.wordpress.org/sakura-network][SVN URL]]
- [[https://developer.wordpress.org/plugins/wordpress-org/how-to-use-subversion/][Using Subversion with the WordPress Plugin Directory]]
- [[https://developer.wordpress.org/plugins/wordpress-org/plugin-developer-faq/][FAQ]]
- [[https://wordpress.org/plugins/developers/#readme][WordPress Plugin Directory readme.txt standard:]]
- [[https://wordpress.org/plugins/developers/readme-validator/][A readme.txt validator]]
* References
- Wordpress document: [[https://developer.wordpress.org/plugins/][Plugin Handbook]]
- WooCommerce document: [[https://docs.woocommerce.com/document/create-a-plugin/][create a plugin]]
- The target php file: [[file:src/sakura.php]]
- [[https://wordpress.org/plugins/debug-bar-console/][Wordpress plugin: debug bar console]]
- [[https://developer.wordpress.org/block-editor/reference-guides/block-api/block-attributes/][Block Attributes]]
